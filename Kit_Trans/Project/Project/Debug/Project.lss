
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000005d2  00000646  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000220  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b2c  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b58  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ece  00000000  00000000  00002f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000434  00000000  00000000  00003e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000674  00000000  00000000  00004278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a51  00000000  00000000  000048ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  0000533d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8d 02 	call	0x51a	; 0x51a <main>
  7a:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPin_Direction>:

#include "DIO.h"

void DIO_SetPin_Direction(uint8_t port, uint8_t pin, uint8_t direction)
{
	switch (direction)
  82:	44 23       	and	r20, r20
  84:	19 f0       	breq	.+6      	; 0x8c <DIO_SetPin_Direction+0xa>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	c9 f1       	breq	.+114    	; 0xfc <DIO_SetPin_Direction+0x7a>
  8a:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch(port)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	91 f0       	breq	.+36     	; 0xb4 <DIO_SetPin_Direction+0x32>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_SetPin_Direction+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	d9 f0       	breq	.+54     	; 0xcc <DIO_SetPin_Direction+0x4a>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	29 f1       	breq	.+74     	; 0xe4 <DIO_SetPin_Direction+0x62>
  9a:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPin_Direction+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPin_Direction+0x22>
  ac:	80 95       	com	r24
  ae:	82 23       	and	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
			break;
  b2:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  b4:	27 b3       	in	r18, 0x17	; 23
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_SetPin_Direction+0x3e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_SetPin_Direction+0x3a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	87 bb       	out	0x17, r24	; 23
			break;
  ca:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  cc:	24 b3       	in	r18, 0x14	; 20
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_SetPin_Direction+0x56>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_SetPin_Direction+0x52>
  dc:	80 95       	com	r24
  de:	82 23       	and	r24, r18
  e0:	84 bb       	out	0x14, r24	; 20
			break;
  e2:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  e4:	21 b3       	in	r18, 0x11	; 17
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_SetPin_Direction+0x6e>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_SetPin_Direction+0x6a>
  f4:	80 95       	com	r24
  f6:	82 23       	and	r24, r18
  f8:	81 bb       	out	0x11, r24	; 17
			break;
  fa:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch(port)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	89 f0       	breq	.+34     	; 0x122 <DIO_SetPin_Direction+0xa0>
 100:	28 f0       	brcs	.+10     	; 0x10c <DIO_SetPin_Direction+0x8a>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	c9 f0       	breq	.+50     	; 0x138 <DIO_SetPin_Direction+0xb6>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	11 f1       	breq	.+68     	; 0x14e <DIO_SetPin_Direction+0xcc>
 10a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 10c:	2a b3       	in	r18, 0x1a	; 26
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SetPin_Direction+0x96>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SetPin_Direction+0x92>
 11c:	82 2b       	or	r24, r18
 11e:	8a bb       	out	0x1a, r24	; 26
			break;
 120:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 122:	27 b3       	in	r18, 0x17	; 23
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPin_Direction+0xac>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPin_Direction+0xa8>
 132:	82 2b       	or	r24, r18
 134:	87 bb       	out	0x17, r24	; 23
			break;
 136:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 138:	24 b3       	in	r18, 0x14	; 20
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_SetPin_Direction+0xc2>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_SetPin_Direction+0xbe>
 148:	82 2b       	or	r24, r18
 14a:	84 bb       	out	0x14, r24	; 20
			break;
 14c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 14e:	21 b3       	in	r18, 0x11	; 17
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPin_Direction+0xd8>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPin_Direction+0xd4>
 15e:	82 2b       	or	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret

00000164 <DIO_SetPin_Value>:
		break;
	}
}
void DIO_SetPin_Value(uint8_t port, uint8_t pin, uint8_t value)
{
	switch (value)
 164:	44 23       	and	r20, r20
 166:	19 f0       	breq	.+6      	; 0x16e <DIO_SetPin_Value+0xa>
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	c9 f1       	breq	.+114    	; 0x1de <DIO_SetPin_Value+0x7a>
 16c:	08 95       	ret
	{
		case DIO_PIN_LOW:
		switch(port)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	91 f0       	breq	.+36     	; 0x196 <DIO_SetPin_Value+0x32>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_SetPin_Value+0x1a>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	d9 f0       	breq	.+54     	; 0x1ae <DIO_SetPin_Value+0x4a>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	29 f1       	breq	.+74     	; 0x1c6 <DIO_SetPin_Value+0x62>
 17c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPin_Value+0x26>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPin_Value+0x22>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	8b bb       	out	0x1b, r24	; 27
			break;
 194:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 196:	28 b3       	in	r18, 0x18	; 24
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SetPin_Value+0x3e>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SetPin_Value+0x3a>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	88 bb       	out	0x18, r24	; 24
			break;
 1ac:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 1ae:	25 b3       	in	r18, 0x15	; 21
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_SetPin_Value+0x56>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_SetPin_Value+0x52>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	85 bb       	out	0x15, r24	; 21
			break;
 1c4:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1c6:	22 b3       	in	r18, 0x12	; 18
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_SetPin_Value+0x6e>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_SetPin_Value+0x6a>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	82 bb       	out	0x12, r24	; 18
			break;
 1dc:	08 95       	ret
		}
		break;
		case DIO_PIN_HIGH:
		switch(port)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	89 f0       	breq	.+34     	; 0x204 <DIO_SetPin_Value+0xa0>
 1e2:	28 f0       	brcs	.+10     	; 0x1ee <DIO_SetPin_Value+0x8a>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	c9 f0       	breq	.+50     	; 0x21a <DIO_SetPin_Value+0xb6>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	11 f1       	breq	.+68     	; 0x230 <DIO_SetPin_Value+0xcc>
 1ec:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 1ee:	2b b3       	in	r18, 0x1b	; 27
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPin_Value+0x96>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPin_Value+0x92>
 1fe:	82 2b       	or	r24, r18
 200:	8b bb       	out	0x1b, r24	; 27
			break;
 202:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 204:	28 b3       	in	r18, 0x18	; 24
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPin_Value+0xac>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPin_Value+0xa8>
 214:	82 2b       	or	r24, r18
 216:	88 bb       	out	0x18, r24	; 24
			break;
 218:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 21a:	25 b3       	in	r18, 0x15	; 21
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_SetPin_Value+0xc2>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_SetPin_Value+0xbe>
 22a:	82 2b       	or	r24, r18
 22c:	85 bb       	out	0x15, r24	; 21
			break;
 22e:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 230:	22 b3       	in	r18, 0x12	; 18
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_SetPin_Value+0xd8>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_SetPin_Value+0xd4>
 240:	82 2b       	or	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <DIO_TogglePin_Value>:
		break;
	}
}
void DIO_TogglePin_Value(uint8_t port, uint8_t pin)
{
	switch(port)
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	89 f0       	breq	.+34     	; 0x26c <DIO_TogglePin_Value+0x26>
 24a:	28 f0       	brcs	.+10     	; 0x256 <DIO_TogglePin_Value+0x10>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	c9 f0       	breq	.+50     	; 0x282 <DIO_TogglePin_Value+0x3c>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	11 f1       	breq	.+68     	; 0x298 <DIO_TogglePin_Value+0x52>
 254:	08 95       	ret
	{
		case DIO_PORTA:
		TGL_BIT(PORTA, pin);
 256:	2b b3       	in	r18, 0x1b	; 27
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_TogglePin_Value+0x1c>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_TogglePin_Value+0x18>
 266:	82 27       	eor	r24, r18
 268:	8b bb       	out	0x1b, r24	; 27
		break;
 26a:	08 95       	ret
		case DIO_PORTB:
		TGL_BIT(PORTB, pin);
 26c:	28 b3       	in	r18, 0x18	; 24
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_TogglePin_Value+0x32>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_TogglePin_Value+0x2e>
 27c:	82 27       	eor	r24, r18
 27e:	88 bb       	out	0x18, r24	; 24
		break;
 280:	08 95       	ret
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
 282:	25 b3       	in	r18, 0x15	; 21
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_TogglePin_Value+0x48>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_TogglePin_Value+0x44>
 292:	82 27       	eor	r24, r18
 294:	85 bb       	out	0x15, r24	; 21
		break;
 296:	08 95       	ret
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
 298:	22 b3       	in	r18, 0x12	; 18
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_TogglePin_Value+0x5e>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_TogglePin_Value+0x5a>
 2a8:	82 27       	eor	r24, r18
 2aa:	82 bb       	out	0x12, r24	; 18
 2ac:	08 95       	ret

000002ae <Buzzer_Initialization>:
{
	CLR_BIT(RelayPRT, RelayPIN);
}
void Relay_TGL(void)
{
	TGL_BIT(RelayPRT, RelayPIN);
 2ae:	d3 9a       	sbi	0x1a, 3	; 26
 2b0:	08 95       	ret

000002b2 <Buzzer_ON>:
 2b2:	db 9a       	sbi	0x1b, 3	; 27
 2b4:	08 95       	ret

000002b6 <Buzzer_OFF>:
 2b6:	db 98       	cbi	0x1b, 3	; 27
 2b8:	08 95       	ret

000002ba <Relay_Initialization>:
 2ba:	d2 9a       	sbi	0x1a, 2	; 26
 2bc:	08 95       	ret

000002be <buzzer_ring>:
}

void buzzer_ring(void)//buzzer ring for one second
{
	Buzzer_ON();
 2be:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Buzzer_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	2f ef       	ldi	r18, 0xFF	; 255
 2c4:	89 e6       	ldi	r24, 0x69	; 105
 2c6:	98 e1       	ldi	r25, 0x18	; 24
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <buzzer_ring+0xa>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <buzzer_ring+0x14>
 2d2:	00 00       	nop
	_delay_ms(500);
	Buzzer_OFF();
 2d4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Buzzer_OFF>
 2d8:	08 95       	ret

000002da <LCD_Command>:
void LCD_Clear(void)
{
	LCD_Command(0x01);
}
void LCD_Command(uint8_t command)
{
 2da:	cf 93       	push	r28
 2dc:	c8 2f       	mov	r28, r24
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RS, LCD_LOW);//Select Command Register
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RW, LCD_LOW);//Write on Screen
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable data
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	63 e0       	ldi	r22, 0x03	; 3
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	//Sending High nibbles
	LCD_PRT = ((command & 0xF0) | (LCD_PRT & 0x0F));
 2fc:	8b b3       	in	r24, 0x1b	; 27
 2fe:	9c 2f       	mov	r25, r28
 300:	90 7f       	andi	r25, 0xF0	; 240
 302:	8f 70       	andi	r24, 0x0F	; 15
 304:	89 2b       	or	r24, r25
 306:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Enable data
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	63 e0       	ldi	r22, 0x03	; 3
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 312:	8f e9       	ldi	r24, 0x9F	; 159
 314:	9f e0       	ldi	r25, 0x0F	; 15
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <LCD_Command+0x3c>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_Command+0x42>
 31c:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable data
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	63 e0       	ldi	r22, 0x03	; 3
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	//Sending Low nibbles
	LCD_PRT = ((command << 4) | (LCD_PRT & 0x0F));
 328:	2b b3       	in	r18, 0x1b	; 27
 32a:	30 e1       	ldi	r19, 0x10	; 16
 32c:	c3 9f       	mul	r28, r19
 32e:	c0 01       	movw	r24, r0
 330:	11 24       	eor	r1, r1
 332:	92 2f       	mov	r25, r18
 334:	9f 70       	andi	r25, 0x0F	; 15
 336:	89 2b       	or	r24, r25
 338:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Enable data
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	63 e0       	ldi	r22, 0x03	; 3
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 344:	8f e9       	ldi	r24, 0x9F	; 159
 346:	9f e0       	ldi	r25, 0x0F	; 15
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <LCD_Command+0x6e>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <LCD_Command+0x74>
 34e:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable data
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	63 e0       	ldi	r22, 0x03	; 3
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 35a:	8f e1       	ldi	r24, 0x1F	; 31
 35c:	9e e4       	ldi	r25, 0x4E	; 78
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <LCD_Command+0x84>
 362:	00 c0       	rjmp	.+0      	; 0x364 <LCD_Command+0x8a>
 364:	00 00       	nop
	_delay_ms(5);
}
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <LCD_Initialization>:
	}
}
void LCD_Initialization(void)
{
	//Define pins direction for control pins
	DIO_SetPin_Direction(LCD_CTRL_PRT, LCD_RS, LCD_OUTPUT);
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CTRL_PRT, LCD_RW, LCD_OUTPUT);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	62 e0       	ldi	r22, 0x02	; 2
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CTRL_PRT, LCD_EN, LCD_OUTPUT);
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	63 e0       	ldi	r22, 0x03	; 3
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
	//Define pins direction for data pins
	DIO_SetPin_Direction(LCD_DTA_PRT, LCD_D4, LCD_OUTPUT);
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	64 e0       	ldi	r22, 0x04	; 4
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DTA_PRT, LCD_D5, LCD_OUTPUT);
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	65 e0       	ldi	r22, 0x05	; 5
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DTA_PRT, LCD_D6, LCD_OUTPUT);
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	66 e0       	ldi	r22, 0x06	; 6
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DTA_PRT, LCD_D7, LCD_OUTPUT);
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	67 e0       	ldi	r22, 0x07	; 7
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
	//Check mode
	#if   LCD_MODE   == BIT4_Mode
	LCD_Command(0x33);/*Define working in 4BIT mode*/
 3b0:	83 e3       	ldi	r24, 0x33	; 51
 3b2:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Command>
	LCD_Command(0x32);/*Define working in 4BIT mode*/
 3b6:	82 e3       	ldi	r24, 0x32	; 50
 3b8:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Command>
	LCD_Command(0x28);/*Use 4BIT mode*/
 3bc:	88 e2       	ldi	r24, 0x28	; 40
 3be:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Command>
	LCD_Command(0x02);/*Return home*/
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Command>
	LCD_Command(0x0C);/*Display ON, Cursor OFF*/
 3c8:	8c e0       	ldi	r24, 0x0C	; 12
 3ca:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Command>
	LCD_Command(0x01);/*Clear screen*/
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Command>
	LCD_Command(0x06);/*Increment cursor right*/
 3d4:	86 e0       	ldi	r24, 0x06	; 6
 3d6:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Command>
	LCD_Command(0x06);/*Increment cursor right*/
	#else
	/*Error State*/
	#endif
	//To be sure that all pins are in off state
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RS, LCD_LOW);
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RW, LCD_LOW);
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DTA_PRT, LCD_D4, LCD_LOW);
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	64 e0       	ldi	r22, 0x04	; 4
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DTA_PRT, LCD_D5, LCD_LOW);
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	65 e0       	ldi	r22, 0x05	; 5
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DTA_PRT, LCD_D6, LCD_LOW);
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	66 e0       	ldi	r22, 0x06	; 6
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DTA_PRT, LCD_D7, LCD_LOW);
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	67 e0       	ldi	r22, 0x07	; 7
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 420:	08 95       	ret

00000422 <LCD_Clear>:
}
void LCD_Clear(void)
{
	LCD_Command(0x01);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Command>
 428:	08 95       	ret

0000042a <LCD_Character>:
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable data
	_delay_ms(5);
}
void LCD_Character(uint8_t character)
{
 42a:	cf 93       	push	r28
 42c:	c8 2f       	mov	r28, r24
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RS, LCD_HIGH);//Select Data Register
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RW, LCD_LOW);//Write on Screen
 438:	40 e0       	ldi	r20, 0x00	; 0
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable data
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	63 e0       	ldi	r22, 0x03	; 3
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	//Sending High nibbles
	LCD_PRT = ((character & 0xF0) | (LCD_PRT & 0x0F));
 44c:	8b b3       	in	r24, 0x1b	; 27
 44e:	9c 2f       	mov	r25, r28
 450:	90 7f       	andi	r25, 0xF0	; 240
 452:	8f 70       	andi	r24, 0x0F	; 15
 454:	89 2b       	or	r24, r25
 456:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Enable data
 458:	41 e0       	ldi	r20, 0x01	; 1
 45a:	63 e0       	ldi	r22, 0x03	; 3
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 462:	8f e9       	ldi	r24, 0x9F	; 159
 464:	9f e0       	ldi	r25, 0x0F	; 15
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <LCD_Character+0x3c>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <LCD_Character+0x42>
 46c:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable data
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	63 e0       	ldi	r22, 0x03	; 3
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	//Sending Low nibbles
	LCD_PRT = ((character << 4) | (LCD_PRT & 0x0F));
 478:	2b b3       	in	r18, 0x1b	; 27
 47a:	30 e1       	ldi	r19, 0x10	; 16
 47c:	c3 9f       	mul	r28, r19
 47e:	c0 01       	movw	r24, r0
 480:	11 24       	eor	r1, r1
 482:	92 2f       	mov	r25, r18
 484:	9f 70       	andi	r25, 0x0F	; 15
 486:	89 2b       	or	r24, r25
 488:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Enable data
 48a:	41 e0       	ldi	r20, 0x01	; 1
 48c:	63 e0       	ldi	r22, 0x03	; 3
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 494:	8f e9       	ldi	r24, 0x9F	; 159
 496:	9f e0       	ldi	r25, 0x0F	; 15
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <LCD_Character+0x6e>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <LCD_Character+0x74>
 49e:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable data
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	63 e0       	ldi	r22, 0x03	; 3
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 4aa:	8f e1       	ldi	r24, 0x1F	; 31
 4ac:	9e e4       	ldi	r25, 0x4E	; 78
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <LCD_Character+0x84>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <LCD_Character+0x8a>
 4b4:	00 00       	nop
	_delay_ms(5);
}
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <LCD_String>:
void LCD_String(uint8_t* str)
{
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	ec 01       	movw	r28, r24
	while (*str != '\0')
 4c0:	88 81       	ld	r24, Y
 4c2:	88 23       	and	r24, r24
 4c4:	31 f0       	breq	.+12     	; 0x4d2 <LCD_String+0x18>
 4c6:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Character(*str);
 4c8:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_Character>
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable data
	_delay_ms(5);
}
void LCD_String(uint8_t* str)
{
	while (*str != '\0')
 4cc:	89 91       	ld	r24, Y+
 4ce:	81 11       	cpse	r24, r1
 4d0:	fb cf       	rjmp	.-10     	; 0x4c8 <LCD_String+0xe>
	{
		LCD_Character(*str);
		str++;
	}
}
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <LED0_Initialization>:
}
void LED2_OFF(void)
{
	
	//CLR_BIT(LED0_PORT, LED0_PIN);//LED-OFF
	DIO_SetPin_Value(LED2_PORT, LED2_PIN, LED_OFF);
 4d8:	41 e0       	ldi	r20, 0x01	; 1
 4da:	62 e0       	ldi	r22, 0x02	; 2
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 4e2:	08 95       	ret

000004e4 <LED0_TGL>:
 4e4:	62 e0       	ldi	r22, 0x02	; 2
 4e6:	82 e0       	ldi	r24, 0x02	; 2
 4e8:	0e 94 23 01 	call	0x246	; 0x246 <DIO_TogglePin_Value>
 4ec:	08 95       	ret

000004ee <LED1_Initialization>:
 4ee:	41 e0       	ldi	r20, 0x01	; 1
 4f0:	67 e0       	ldi	r22, 0x07	; 7
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 4f8:	08 95       	ret

000004fa <LED1_TGL>:
 4fa:	67 e0       	ldi	r22, 0x07	; 7
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	0e 94 23 01 	call	0x246	; 0x246 <DIO_TogglePin_Value>
 502:	08 95       	ret

00000504 <LED2_Initialization>:
 504:	41 e0       	ldi	r20, 0x01	; 1
 506:	63 e0       	ldi	r22, 0x03	; 3
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 50e:	08 95       	ret

00000510 <LED2_TGL>:
}
void LED2_TGL(void)
{
	//TGL_BIT(LED0_PORT, LED0_PIN);//LED-Toggle
	DIO_TogglePin_Value(LED2_PORT, LED2_PIN);
 510:	63 e0       	ldi	r22, 0x03	; 3
 512:	83 e0       	ldi	r24, 0x03	; 3
 514:	0e 94 23 01 	call	0x246	; 0x246 <DIO_TogglePin_Value>
 518:	08 95       	ret

0000051a <main>:



int main(void)
	
{	LED0_Initialization();
 51a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LED0_Initialization>
	LED1_Initialization();
 51e:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED1_Initialization>
	LED2_Initialization();
 522:	0e 94 82 02 	call	0x504	; 0x504 <LED2_Initialization>
	Relay_Initialization();
 526:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Relay_Initialization>
	Buzzer_Initialization();
 52a:	0e 94 57 01 	call	0x2ae	; 0x2ae <Buzzer_Initialization>
	LCD_Initialization();
 52e:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_Initialization>
	UART_Init(); 
 532:	0e 94 db 02 	call	0x5b6	; 0x5b6 <UART_Init>
	LCD_String("Smart Home");
 536:	80 e6       	ldi	r24, 0x60	; 96
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_String>
	SPI_Init();
 53e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <SPI_Init>
	char data;
	

	while(1)
{ 
	data = UART_Receive();//UART_Receive();
 542:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <UART_Receive>
	
	
	if(data == '1')
 546:	81 33       	cpi	r24, 0x31	; 49
 548:	69 f4       	brne	.+26     	; 0x564 <main+0x4a>
	{
	       SPI_Transmit(data);
 54a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <SPI_Transmit>
			LCD_Clear();
 54e:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Clear>
			LCD_String("led 1 ");
 552:	8b e6       	ldi	r24, 0x6B	; 107
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_String>
			LED0_TGL();
 55a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LED0_TGL>
			buzzer_ring();
 55e:	0e 94 5f 01 	call	0x2be	; 0x2be <buzzer_ring>
 562:	ef cf       	rjmp	.-34     	; 0x542 <main+0x28>
	} 
	 
	else if(data == '2')
 564:	82 33       	cpi	r24, 0x32	; 50
 566:	69 f4       	brne	.+26     	; 0x582 <main+0x68>
	{
		
			SPI_Transmit(data);
 568:	0e 94 d7 02 	call	0x5ae	; 0x5ae <SPI_Transmit>
			LCD_Clear();
 56c:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Clear>
			LCD_String("led 2");
 570:	82 e7       	ldi	r24, 0x72	; 114
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_String>
			LED1_TGL();
 578:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LED1_TGL>
			buzzer_ring();
 57c:	0e 94 5f 01 	call	0x2be	; 0x2be <buzzer_ring>
 580:	e0 cf       	rjmp	.-64     	; 0x542 <main+0x28>
	}
	 
	else if(data == '3')
 582:	83 33       	cpi	r24, 0x33	; 51
 584:	f1 f6       	brne	.-68     	; 0x542 <main+0x28>
	{	
			SPI_Transmit(data);
 586:	0e 94 d7 02 	call	0x5ae	; 0x5ae <SPI_Transmit>
			LCD_Clear();
 58a:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Clear>
			LCD_String("led 3");
 58e:	88 e7       	ldi	r24, 0x78	; 120
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_String>
			LED2_TGL();
 596:	0e 94 88 02 	call	0x510	; 0x510 <LED2_TGL>
			buzzer_ring();
 59a:	0e 94 5f 01 	call	0x2be	; 0x2be <buzzer_ring>
 59e:	d1 cf       	rjmp	.-94     	; 0x542 <main+0x28>

000005a0 <SPI_Init>:
#include "SPI.h"

void SPI_Init(void)
{
	#if SPI_MODE == MASTER
	SET_BIT(SPI_PORT, MOSI);/*Define direction as output*/
 5a0:	bd 9a       	sbi	0x17, 5	; 23
	CLR_BIT(SPI_PORT, MISO);/*Define direction as input*/
 5a2:	be 98       	cbi	0x17, 6	; 23
	SET_BIT(SPI_PORT, CLK);/*Define direction as output*/
 5a4:	bf 9a       	sbi	0x17, 7	; 23
	SET_BIT(SPI_PORT, SS); /*Define direction as output*/
 5a6:	bc 9a       	sbi	0x17, 4	; 23
	SPCR = 0x53;//0b 0101 0011
 5a8:	83 e5       	ldi	r24, 0x53	; 83
 5aa:	8d b9       	out	0x0d, r24	; 13
 5ac:	08 95       	ret

000005ae <SPI_Transmit>:
	SPCR = 0x43;//0b 0100 0011
	#endif
}
void SPI_Transmit(uint8_t data)
{
	SPDR = data;
 5ae:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR, SPIF) != 1);
 5b0:	77 9b       	sbis	0x0e, 7	; 14
 5b2:	fe cf       	rjmp	.-4      	; 0x5b0 <SPI_Transmit+0x2>
}
 5b4:	08 95       	ret

000005b6 <UART_Init>:
}
void UART_Transmit(uint8_t data)
{
	UDR = data;
	while (GET_BIT(UCSRA, TXC) != 1);
}
 5b6:	88 e1       	ldi	r24, 0x18	; 24
 5b8:	8a b9       	out	0x0a, r24	; 10
 5ba:	86 e8       	ldi	r24, 0x86	; 134
 5bc:	80 bd       	out	0x20, r24	; 32
 5be:	87 e6       	ldi	r24, 0x67	; 103
 5c0:	89 b9       	out	0x09, r24	; 9
 5c2:	10 bc       	out	0x20, r1	; 32
 5c4:	08 95       	ret

000005c6 <UART_Receive>:
uint8_t UART_Receive(void)
{
	while (GET_BIT(UCSRA, RXC) != 1);
 5c6:	5f 9b       	sbis	0x0b, 7	; 11
 5c8:	fe cf       	rjmp	.-4      	; 0x5c6 <UART_Receive>
	return UDR;
 5ca:	8c b1       	in	r24, 0x0c	; 12
}
 5cc:	08 95       	ret

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
